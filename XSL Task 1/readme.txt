Задание 1 и 2 сделаны в одном проекте. 

Задание 1. Объявления на формах.

Была придумана следующая структура XML:

<messages>
	<message id="1" messagetype="1" visible="true">
		<form_id>step_1</form_id>
		<form_id>step_1</form_id>
		<title>Заголовок информационного сообщения</title>
		<section>
			<text>Первая часть информационного сообщения</text>
			<list>
				<item>Элемент 1</item>
				<item>Элемент 2</item>
			</list>
			<text>Продолжение первой части информационного сообщения</text>
		</section>
		<section>
			<text>Вторая часть информационного сообщения</text>
			<list>
				<item>Элемент 21</item>
				<item>Элемент 22</item>
			</list>
			<text>Продолжение второй части информационного сообщения</text>
		</section>
	</message>
</messages>

Краткое описание элементов:
	message - элемент содержащий всю информацию о сообщение.
		@id - идентификатор сообщения. Число.
		@messagetype - тип сообщения. Число.
			1 - информационное сообщение
			2 - предупреждение
			3 - срочное сообщение
		@visible - признак видимости. В зависимости от обстоятельств сообщение может не отображаться.
	form_id - элемент содержащий ссылку на форму. Одно сообщение может быть привязано к разным формам.
	title - заголовок сообщения.
	section - информационный блок.
	text - текстовый блок.
	list/item - элементы списка.

Для валидации XML создана схема XSD. Графическое отображение схемы можно посмотреть в этом файле «xsd для сообщений на формах.png»

XSL схема для обработки сообщений:
	formandmessage.xsl - общий шалон
	message.xsl - шаблон обработки элементов сообщений
	
При обработке сообщения сортируются по атрибуту @messagetype. Таким образом срочные сообщения всегда будут выше остальных.

Проверка:
1) Сообщения для формы «step_1»(Три сообщения разных типов)
xsltproc --output formaandmessage.html --stringparam scid "step_1" formandmessage.xsl formandmessage.xml

2)Сообщение для формы «step_2» (Одно сообщение которое так же присутствует на форме «step_1»)
xsltproc --output formaandmessage.html --stringparam scid "step_2" formandmessage.xsl formandmessage.xml

Задание 2. Построение и валидация формы


Для выполнения задания была придумана структура XML в которой содержится информация об элементах формы. Так же XML содержит информацию необходимую для валидации на клиенте.
Для XML была реализована XSD схема, по которой осуществляется проверка корректности данных в XML.

Шаблон позволяет создать следующие элементы в форме:
 - Текстовые поля для ввода текста и цифр
 - Чекбоксы
 - Селекты (выпадающие и с множественным выбором)
 - Кнопку submit
 - Группы элементов (выводиться отдельный lable)

Для текстовых полей(input) добавлена клиентская валидация, реализованная с помощью jQuery и lodash.
Проверка реализована через передачу data- атрибутов в input, с последующей обработкой jquery.
Возможные варианты ограничений:
	min - минимально возможное значение для чисел
	max - максимально возможное значение для чисел
	length - длинна для текстовых полей
	regexp - регулярное выражение
	required - признак обязательности заполнения.
	error - текст сообщения об ошибке для конкретного элемента
Во время клиентской валидации, если поле заполнено с ошибками, то левее поля появляется сообщение с текстом. Текст сообщения мы получаем из атрибута error, который так же присутствует у каждого элемента.

Помимо клиентской валидации реализована имитация серверной валидации. В XSL шаблоне присутствует параметр submit-request. В параметр передается nodeset c заполненными полями. 
		<root>
			<item id="formComment">Коммуналька</item>
			<item id="tempAccount">2131211111</item>
			<item id="month">04</item>
			<item id="year">2004</item>
			<item id="peni">-1</item>
			<item id="sum">9999999</item>
			<item id="paymenttype">1</item>
			<item id="attrcheck"></item>
		</root>

Проверка осуществляется следующим образом: Формируя форму и пробегая по всем элементам XML и находя элементы ввода информации, смотрим во временное дерево на предмет наличия там записи с таким же ID как и во временном дереве. Если запись во временном дереве найдена, получает value и обрабатываем по правилам аналогично клиентской валидации, но средствами XSL. Если значение не удовлетворяет условиям, ему присваивается соответствующий класс (текст элемента помечается красным). Элементы формы заполняются значениями из временного дерева.
Для проверки работы серверной валидации необходимо убрать закомментированный участок параметра submit-request для демонстрации работы валидации средствами xsl.

Запуск процессора: 
xsltproc --output formaandmessage.html --stringparam scid "step_1" formandmessage.xsl formandmessage.xml

Результат можно посмотреть в файлах
	formaandmessage.html - форма без валидации средствами XSL
	formaandmessagevalid.html - форма после валидации средствами XSL

XSL схема для обработки форм:
	formandmessage.xsl - общий шалон
	message.xsl - шаблон обработки элементов формы
